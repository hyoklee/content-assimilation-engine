.TH OMNI 5 "May 1 2025" "omni 0.0.1" "File Formats Manual"
.SH NAME
omni \- wrp(1) input and output file format
.SH DESCRIPTION
.B omni
is a YAML-based file format used by
.BR wrp (1)
for data processing workflows. The format is divided into 4 main sections:
.PP
.B Meta
User-defined tags for metadata classification
.PP
.B Source
Location of BLOBs (Binary Large Objects) to be processed
.PP
.B Lambda
Data transformation functions for processing
.PP
.B Destination
Storage options for processed tags and BLOBs
.SH FORMAT SPECIFICATION
An OMNI file is structured as a YAML document with the following fields:
.TP
.B name
The job identifier (required)
.TP
.B tags
A list of metadata tags for classification
.TP
.B src
Source file path. See
.B FILE WAITING FUNCTIONALITY
for special syntax
.TP
.B hash
SHA256 hash for file integrity verification (optional)
.TP
.B size
Total file size in bytes
.TP
.B offset
Starting position for data reading using lseek(2)
.TP
.B nbyte
Number of bytes to read using pread(2) or read(2)
.TP
.B schedule
Scheduling information for automated execution
.SH FILE WAITING FUNCTIONALITY
When the
.B src
field starts with the
.RB ` > '
character,
.BR wrp (1)
will wait indefinitely for the specified file to become available on the filesystem before continuing with processing. This enables workflows where input files are generated dynamically or arrive with delays.
.SS Usage
Prefix the file path in the
.B src
field with
.RB ` > '
to enable waiting:
.PP
.nf
.RS
# Sample OMNI format with file waiting
name: delayed input job

tags:
  - streaming
  - dynamic_input

# Using > prefix to wait for file
src: ">./data/delayed_output.csv"

# bytes
size: 1000

# lseek()
offset: 0

# pread, read()
nbyte: 50
.RE
.fi
.SS Behavior
.TP
.B Normal operation
.BI src: " ./file.txt"
Throws error if file doesn't exist
.TP
.B Waiting operation
.BI src: " >./file.txt"
Waits forever until file becomes available
.TP
.B Polling interval
Checks for file existence every 100 milliseconds
.TP
.B Console output
Provides clear status messages during waiting process
.SS Use Cases
.IP \(bu 2
Processing files generated by long-running simulations
.IP \(bu 2
Streaming workflows where files arrive at unpredictable intervals
.IP \(bu 2
Batch processing systems with dynamic file creation
.IP \(bu 2
Pipeline coordination between multiple processes
.SH EXAMPLES
The following YAML file demonstrates basic usage with 2 sections - Meta and Source.
It reads 30 bytes from a CSV file starting at position 38:
.PP
.nf
.RS
# Sample OMNI format in YAML
name: cae posix job

# Either cron or event (e.g, start when source arrives)
schedule:
 - cron: "0 10 * * 2"

tags:
  - ai
  - material science
  - utah

src: "./data/A46_xx.csv"

# SHA256
hash: a4580e7e8b49255a3e10599c5222a021bdc9efec6b36c2e6c99f9f05b6dc63f3

# bytes
size: 106922

# lseek()
offset: 38

# pread, read()
nbyte: 30
.RE
.fi
.SH FILES
.TP
.I *.yaml, *.yml
OMNI format files
.SH SEE ALSO
.BR wrp (1),
.BR yaml (7),
.BR lseek (2),
.BR pread (2),
.BR read (2)
.SH AUTHORS
Content Assimilation Engine Project
.SH BUGS
Report bugs at https://github.com/hyoklee/content-assimilation-engine/issues